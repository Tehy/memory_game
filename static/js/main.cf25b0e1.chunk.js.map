{"version":3,"sources":["components/Board.js","App.js","index.js"],"names":["getRandomInt","max","Math","floor","random","Board","numbers","nextRound","useState","board","setBoard","roundPass","setRoundPass","fillBoard","indexes","numbersCopy","clickCount","i","j","array","includes","toString","push","key","className","id","onClick","document","querySelectorAll","forEach","el","classList","add","getElementById","elInnerHTML","innerHTML","parseInt","length","splice","useEffect","b","numbersLen","randomIndexes","num","randomRectangleIndexes","undefined","App","initialNumbers","setNumbers","nums","pop","ReactDOM","render","StrictMode"],"mappings":"uRAIA,SAASA,EAAaC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAoB/C,IAmGeI,EAnGD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAAgB,EACdC,qBADc,mBACjCC,EADiC,KAC1BC,EAD0B,OAENF,qBAFM,mBAEjCG,EAFiC,KAEtBC,EAFsB,KAUlCC,EAAY,SAACC,EAASR,GAK1B,IAJA,IAAIS,EAAW,YAAOT,GAClBG,EAAQ,GACRO,EAAa,EAHqB,WAK7BC,GACP,IANoC,eAM3BC,GAlCG,IAACC,EAmCPL,EAAQM,SAASH,EAAEI,WAAaH,EAAEG,YACpCZ,EAAMa,KACJ,yBACEC,IAAKN,EAAEI,WAAaH,EAAEG,WACtBG,UAAU,qBACVC,GAAIR,EAAEI,WAAaH,EAAEG,WACrBK,QAAS,WAlBTC,SAASC,iBAAiB,uBAChCC,SAAQ,SAAUC,GACpBA,EAAGC,UAAUC,IAAI,0BAkBP,IAAIF,EAAKH,SAASM,eAAehB,EAAEI,WAAaH,EAAEG,YAClDS,EAAGN,UAAY,oBACf,IAAIU,EAAcJ,EAAGK,UAEf7B,EAAQU,KAAgBoB,SAASF,IACrCtB,GAAa,GACbI,EAAa,GACJA,IAAeV,EAAQ+B,OAAS,GACzCzB,GAAa,GACbI,EAAa,GAEbA,OAtDCG,EA0DMJ,GAzDJuB,OAAOpC,KAAKC,MAAMD,KAAKE,SAAWe,EAAMkB,QAAS,KA8D5D5B,EAAMa,KACJ,yBACEC,IAAKN,EAAEI,WAAaH,EAAEG,WACtBG,UAAU,YACVC,GAAIR,EAAEI,WAAaH,EAAEG,YAHvB,UA9BGH,EAAI,EAAGA,EAvCJ,EAuCmBA,IAAM,EAA5BA,GAwCTT,EAAMa,KAAK,+BAzCJL,EAAI,EAAGA,EAtCF,EAsCiBA,IAAM,EAA5BA,GA2CT,OAAOR,GAQT,OALA8B,qBAAU,WACR,IAAIC,EAAI3B,EA3EZ,SAAgC4B,GAE9B,IADA,IAAIC,EAAgB,KACP,CACX,IAAIC,EACF3C,EAdY,GAcYqB,WAAarB,EAdzB,GAciDqB,WAI/D,GAHKqB,EAActB,SAASuB,IAC1BD,EAAcpB,KAAKqB,GAEjBD,EAAcL,SAAWI,EAAY,MAE3C,OAAOC,EAiEaE,CAAuBtC,EAAQ+B,QAAS/B,GAC1DI,EAAS8B,KACR,CAAClC,SAEiBuC,IAAdlC,EACL,yBAAKa,UAAU,SAASf,IACR,IAAdE,EACF,yBAAKa,UAAU,YACb,yCACA,6BACA,4BACEE,QAAS,WACPd,IACAL,EAAUD,KAHd,eAUF,yBAAKkB,UAAU,YACb,6CACA,6BACA,4BACEE,QAAS,WACPd,MAFJ,WC7ESkC,MA7Bf,WACE,IAAIC,EAAiB,CAAC,EAAG,EAAG,GADf,EAEiBvC,qBAFjB,mBAENF,EAFM,KAEG0C,EAFH,KAcb,OAVAT,qBAAU,WACRS,EAAWD,KACV,IAQIzC,EACL,oCACE,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,UAChB,2CACA,6FAED,kBAAC,EAAD,CAAOlB,QAASA,EAASC,UAbhC,SAAmBD,GACjB,IAAI2C,EAAI,sBAAO3C,GAAP,CAAgBA,EAAQ4C,MAAQ,IACxCF,IACAA,EAAWC,QAcX,sCCxBJE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASM,eAAe,W","file":"static/js/main.cf25b0e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst boardSize = 7;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\nconst popRandom = (array) => {\n  let random = array.splice(Math.floor(Math.random() * array.length), 1);\n  return random;\n};\n\nfunction randomRectangleIndexes(numbersLen) {\n  let randomIndexes = [];\n  while (true) {\n    let num =\n      getRandomInt(boardSize).toString() + getRandomInt(boardSize).toString();\n    if (!randomIndexes.includes(num)) {\n      randomIndexes.push(num);\n    }\n    if (randomIndexes.length === numbersLen) break;\n  }\n  return randomIndexes;\n}\n\nconst Board = ({ numbers, nextRound }) => {\n  const [board, setBoard] = useState();\n  const [roundPass, setRoundPass] = useState();\n\n  const hideRectangleTexts = () => {\n    let els = document.querySelectorAll(\".rectangle-playable\");\n    els.forEach(function (el) {\n      el.classList.add(\"rectangle-hide-text\");\n    });\n  };\n  const fillBoard = (indexes, numbers) => {\n    let numbersCopy = [...numbers];\n    let board = [];\n    var clickCount = 0;\n\n    for (let i = 0; i < boardSize; i++) {\n      for (let j = 0; j < boardSize; j++) {\n        if (indexes.includes(i.toString() + j.toString())) {\n          board.push(\n            <div\n              key={i.toString() + j.toString()}\n              className=\"rectangle-playable\"\n              id={i.toString() + j.toString()}\n              onClick={() => {\n                hideRectangleTexts();\n                var el = document.getElementById(i.toString() + j.toString());\n                el.className = \"rectangle-clicked\";\n                let elInnerHTML = el.innerHTML;\n\n                if (!(numbers[clickCount] === parseInt(elInnerHTML))) {\n                  setRoundPass(false);\n                  clickCount = 0;\n                } else if (clickCount === numbers.length - 1) {\n                  setRoundPass(true);\n                  clickCount = 0;\n                } else {\n                  clickCount++;\n                }\n              }}\n            >\n              {popRandom(numbersCopy)}\n              {/* {numbers.pop(0)} */}\n            </div>\n          );\n        } else {\n          board.push(\n            <div\n              key={i.toString() + j.toString()}\n              className=\"rectangle\"\n              id={i.toString() + j.toString()}\n            >\n              &nbsp;\n            </div>\n          );\n        }\n      }\n      board.push(<br />);\n    }\n    return board;\n  };\n\n  useEffect(() => {\n    let b = fillBoard(randomRectangleIndexes(numbers.length), numbers);\n    setBoard(b);\n  }, [numbers]);\n\n  return roundPass === undefined ? (\n    <div className=\"board\">{board}</div>\n  ) : roundPass === true ? (\n    <div className=\"win-fail\">\n      <h2>Good job!</h2>\n      <br />\n      <button\n        onClick={() => {\n          setRoundPass();\n          nextRound(numbers);\n        }}\n      >\n        Next round\n      </button>\n    </div>\n  ) : (\n    <div className=\"win-fail\">\n      <h2>Round failed!</h2>\n      <br />\n      <button\n        onClick={() => {\n          setRoundPass();\n          /* draws the same board */\n        }}\n      >\n        Retry\n      </button>\n      {/*  TODO new button draw new board \n            setBoard(fillboard....)\n          */}\n    </div>\n  );\n};\nexport default Board;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  let initialNumbers = [1, 2, 3];\n  const [numbers, setNumbers] = useState();\n\n  useEffect(() => {\n    setNumbers(initialNumbers);\n  }, []);\n\n  function nextRound(numbers) {\n    let nums = [...numbers, numbers.pop() + 1];\n    setNumbers();\n    setNumbers(nums);\n  }\n\n  return numbers ? (\n    <>\n      <div className=\"app\">\n        <header className=\"header\">\n          <h1>Memory Test</h1>\n          <p>test how far you memory last by clicking the squares in order</p>\n        </header>\n        {<Board numbers={numbers} nextRound={nextRound} />}\n      </div>\n    </>\n  ) : (\n    <></>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}